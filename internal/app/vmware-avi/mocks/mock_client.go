// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/venafi/vmware-avi-connector/internal/app/domain"
	models "github.com/vmware/alb-sdk/go/models"
	session "github.com/vmware/alb-sdk/go/session"
)

// MockClientServices is a mock of ClientServices interface.
type MockClientServices struct {
	ctrl     *gomock.Controller
	recorder *MockClientServicesMockRecorder
}

// MockClientServicesMockRecorder is the mock recorder for MockClientServices.
type MockClientServicesMockRecorder struct {
	mock *MockClientServices
}

// NewMockClientServices creates a new mock instance.
func NewMockClientServices(ctrl *gomock.Controller) *MockClientServices {
	mock := &MockClientServices{ctrl: ctrl}
	mock.recorder = &MockClientServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientServices) EXPECT() *MockClientServicesMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientServices) Close(client *domain.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", client)
}

// Close indicates an expected call of Close.
func (mr *MockClientServicesMockRecorder) Close(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientServices)(nil).Close), client)
}

// Connect mocks base method.
func (m *MockClientServices) Connect(client *domain.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockClientServicesMockRecorder) Connect(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClientServices)(nil).Connect), client)
}

// CreateSSLKeyAndCertificate mocks base method.
func (m *MockClientServices) CreateSSLKeyAndCertificate(client *domain.Client, obj *models.SSLKeyAndCertificate, options ...session.ApiOptionsParams) (*models.SSLKeyAndCertificate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{client, obj}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSSLKeyAndCertificate", varargs...)
	ret0, _ := ret[0].(*models.SSLKeyAndCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSLKeyAndCertificate indicates an expected call of CreateSSLKeyAndCertificate.
func (mr *MockClientServicesMockRecorder) CreateSSLKeyAndCertificate(client, obj interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{client, obj}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSLKeyAndCertificate", reflect.TypeOf((*MockClientServices)(nil).CreateSSLKeyAndCertificate), varargs...)
}

// GetAllSSLKeysAndCertificates mocks base method.
func (m *MockClientServices) GetAllSSLKeysAndCertificates(client *domain.Client, options ...session.ApiOptionsParams) ([]*models.SSLKeyAndCertificate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{client}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllSSLKeysAndCertificates", varargs...)
	ret0, _ := ret[0].([]*models.SSLKeyAndCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSSLKeysAndCertificates indicates an expected call of GetAllSSLKeysAndCertificates.
func (mr *MockClientServicesMockRecorder) GetAllSSLKeysAndCertificates(client interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{client}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSSLKeysAndCertificates", reflect.TypeOf((*MockClientServices)(nil).GetAllSSLKeysAndCertificates), varargs...)
}

// GetAllTenants mocks base method.
func (m *MockClientServices) GetAllTenants(client *domain.Client, options ...session.ApiOptionsParams) ([]*models.Tenant, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{client}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllTenants", varargs...)
	ret0, _ := ret[0].([]*models.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTenants indicates an expected call of GetAllTenants.
func (mr *MockClientServicesMockRecorder) GetAllTenants(client interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{client}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTenants", reflect.TypeOf((*MockClientServices)(nil).GetAllTenants), varargs...)
}

// GetAllVirtualServices mocks base method.
func (m *MockClientServices) GetAllVirtualServices(client *domain.Client, options ...session.ApiOptionsParams) ([]*models.VirtualService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{client}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllVirtualServices", varargs...)
	ret0, _ := ret[0].([]*models.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVirtualServices indicates an expected call of GetAllVirtualServices.
func (mr *MockClientServicesMockRecorder) GetAllVirtualServices(client interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{client}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVirtualServices", reflect.TypeOf((*MockClientServices)(nil).GetAllVirtualServices), varargs...)
}

// GetSSLKeyAndCertificateById mocks base method.
func (m *MockClientServices) GetSSLKeyAndCertificateById(client *domain.Client, uuid string, options ...session.ApiOptionsParams) (*models.SSLKeyAndCertificate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{client, uuid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSSLKeyAndCertificateById", varargs...)
	ret0, _ := ret[0].(*models.SSLKeyAndCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSLKeyAndCertificateById indicates an expected call of GetSSLKeyAndCertificateById.
func (mr *MockClientServicesMockRecorder) GetSSLKeyAndCertificateById(client, uuid interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{client, uuid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSLKeyAndCertificateById", reflect.TypeOf((*MockClientServices)(nil).GetSSLKeyAndCertificateById), varargs...)
}

// GetSSLKeyAndCertificateByName mocks base method.
func (m *MockClientServices) GetSSLKeyAndCertificateByName(client *domain.Client, name string, options ...session.ApiOptionsParams) (*models.SSLKeyAndCertificate, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{client, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSSLKeyAndCertificateByName", varargs...)
	ret0, _ := ret[0].(*models.SSLKeyAndCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSLKeyAndCertificateByName indicates an expected call of GetSSLKeyAndCertificateByName.
func (mr *MockClientServicesMockRecorder) GetSSLKeyAndCertificateByName(client, name interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{client, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSLKeyAndCertificateByName", reflect.TypeOf((*MockClientServices)(nil).GetSSLKeyAndCertificateByName), varargs...)
}

// GetVirtualServiceByName mocks base method.
func (m *MockClientServices) GetVirtualServiceByName(client *domain.Client, name string, options ...session.ApiOptionsParams) (*models.VirtualService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{client, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVirtualServiceByName", varargs...)
	ret0, _ := ret[0].(*models.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualServiceByName indicates an expected call of GetVirtualServiceByName.
func (mr *MockClientServicesMockRecorder) GetVirtualServiceByName(client, name interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{client, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualServiceByName", reflect.TypeOf((*MockClientServices)(nil).GetVirtualServiceByName), varargs...)
}

// NewClient mocks base method.
func (m *MockClientServices) NewClient(connection *domain.Connection, tenant string) *domain.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", connection, tenant)
	ret0, _ := ret[0].(*domain.Client)
	return ret0
}

// NewClient indicates an expected call of NewClient.
func (mr *MockClientServicesMockRecorder) NewClient(connection, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockClientServices)(nil).NewClient), connection, tenant)
}

// UpdateVirtualService mocks base method.
func (m *MockClientServices) UpdateVirtualService(client *domain.Client, obj *models.VirtualService, options ...session.ApiOptionsParams) (*models.VirtualService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{client, obj}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVirtualService", varargs...)
	ret0, _ := ret[0].(*models.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualService indicates an expected call of UpdateVirtualService.
func (mr *MockClientServicesMockRecorder) UpdateVirtualService(client, obj interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{client, obj}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualService", reflect.TypeOf((*MockClientServices)(nil).UpdateVirtualService), varargs...)
}
